/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-SOCI.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : SOCI
 #	author : miyako
 #	2025/05/20
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-SOCI.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- SOCI
            
			case 1 :
				SOCI(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -


static void toStr(PA_Unistring* from, std::string& to) {
    C_TEXT t;
    t.setUTF16String((const PA_Unichar *)from->fString, from->fLength);
    CUTF8String u8;
    t.copyUTF8String(&u8);
    to = std::string((const char *)u8.c_str(), u8.length());
}

static void SOCI(PA_PluginParameters params) {

    soci_backend_t backend = (soci_backend_t)PA_GetLongParameter(params, 1);
    soci_mode_t mode = (soci_mode_t)PA_GetLongParameter(params, 5);
    PA_CollectionRef statements = PA_GetCollectionParameter(params, 3);
    PA_CollectionRef bindings = PA_GetCollectionParameter(params, 4);
    PA_ObjectRef status = PA_CreateObject();
    
    PackagePtr pParams = (PackagePtr)params->fParameters;

    C_TEXT p2;
    p2.fromParamAtIndex(pParams, 2);
    CUTF8String connection;
    p2.copyUTF8String(&connection);
    
    ob_set_b(status, L"success", false);
            
    soci::session sql;
    
    try {
        switch (backend) {
            case soci_backend_odbc:
                break;
            case soci_backend_mysql:
                break;
            case soci_backend_postgresql:
                break;
            case soci_backend_sqlite3:
                sql.open(soci::sqlite3, (const char *)connection.c_str());
                break;
        }
        
        std::unique_ptr<soci::transaction> tr;
        if(mode == soci_mode_transaction) {
            tr = std::make_unique<soci::transaction>(sql);
        }
        
        PA_CollectionRef results = PA_CreateCollection();
        
        if(statements != NULL) {
            
            unsigned int countLines = PA_GetCollectionLength(statements);
            unsigned int countBindings = bindings == NULL ? 0 : PA_GetCollectionLength(bindings);
            
            for(unsigned int l = 0; l < countLines; ++l) {
                PA_Variable v = PA_GetCollectionElement(statements, l);
                if(PA_GetVariableKind(v) == eVK_Unistring) {
                    
                    PA_Unistring _statement = PA_GetStringVariable(v);
                    std::string statement;
                    toStr(&_statement, statement);
                      
                    if(l < countBindings) {
                        PA_Variable bindingType = PA_GetCollectionElement(bindings, l);
                        
                        switch (PA_GetVariableKind(bindingType)) {
                            case eVK_Object:
                            {
                                soci::statement st(sql);
                                soci::row r;
                                
                                std::map<std::string, std::string>bind_dt_string;
                                
                                st.alloc();
                                st.prepare(statement);
                                st.exchange(soci::into(r));
                                
                                PA_ObjectRef binding = PA_GetObjectVariable(bindingType);
                                PA_Variable cbparams[1];
                                cbparams[0] = PA_CreateVariable(eVK_Object);
                                PA_SetObjectVariable(&cbparams[0], binding);
                                PA_CollectionRef keys = PA_GetCollectionVariable(PA_ExecuteCommandByID(1719 /*OB Keys*/, cbparams, 1));
                                PA_ClearVariable(&cbparams[0]);
                                if(keys != NULL) {
                                    unsigned int count = PA_GetCollectionLength(keys);
                                    for(unsigned int i = 0; i < count; ++i) {
                                        PA_Variable v = PA_GetCollectionElement(keys, i);
                                        if(PA_GetVariableKind(v) == eVK_Unistring) {
                                            PA_Unistring _name = PA_GetStringVariable(v);
                                            std::string name;
                                            toStr(&_name, name);
                                            PA_Variable value = PA_GetObjectProperty(binding, &_name);
                                            PA_VariableKind type = PA_GetObjectPropertyType(binding, &_name);
                                            switch (type) {
                                                case eVK_Unistring:
                                                {
                                                    PA_Unistring _value = PA_GetStringVariable(value);
                                                    std::string value;
                                                    toStr(&_value, value);
                                                    bind_dt_string[name] = value;
                                                    
                                                    st.exchange(soci::use(bind_dt_string[name], name));
                                                    
                                                }
                                                    break;
                                                    
                                                default:
                                                    break;
                                            }
                                        }
                                    }
                                }

                                st.define_and_bind();
                                st.execute();
                                
                                PA_Variable result = PA_CreateVariable(eVK_Collection);
                                PA_CollectionRef _result = PA_CreateCollection();
                                
                                while (st.fetch()) {
                                    PA_Variable col = PA_CreateVariable(eVK_Object);
                                    PA_ObjectRef _col = PA_CreateObject();
                                    
                                    for (std::size_t i = 0; i < r.size(); ++i) {

                                        auto row_properties = r.get_properties(i);
                                        std::string col_name = row_properties.get_name();
                                        
                                        if (r.get_indicator(i) == soci::i_null) {
                                            ob_set_0(_col, col_name.c_str());
                                        }else{
                                            soci::data_type col_type = row_properties.get_data_type();
                                            /*
                                             dt_string, dt_date, dt_double, dt_integer, dt_long_long, dt_unsigned_long_long,
                                             dt_blob, dt_xml
                                             */
                                            switch (col_type) {
                                                case soci::dt_string:
                                                {
                                                    std::string value = r.get<std::string>(i);
                                                    ob_set_s(_col, col_name.c_str(), value.c_str());
                                                }
                                                    break;
                                                    
                                                default:
                                                    break;
                                            }
                                        }
 
                                    }
                                    
                                    PA_SetObjectVariable(&col, _col);
                                    PA_SetCollectionElement(_result, PA_GetCollectionLength(_result), col);
                                }
                                
                                PA_SetCollectionVariable(&result, _result);
                                PA_SetCollectionElement(results, l, result);
                                ob_set_b(status, L"success", true);
                                
                            }
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
        
        if(mode == soci_mode_transaction) {
            tr->commit();
            tr.reset(); // destroy transaction object
        }
        
        ob_set_c(status, "results", results);
        
    } catch (const std::exception& e) {
        ob_set_s(status, "errorMessage", e.what());
        ob_set_b(status, L"success", false);
    }
    PA_ReturnObject(params, status);
}

